#!/usr/bin/env python

import sys
import json
import requests

def get_inventory():
    inventory = {}
    inventory['_meta'] = {'hostvars': {}}

    # API endpoint to get the list of apps
    apps_api_url = 'https://api.example.com/get_apps'  # Replace with your actual API endpoint for apps
    headers = {'Content-Type': 'application/json'}

    # Unique payload for the apps API request
    apps_payload = {
        # Replace with your actual payload for the apps API
        # Example:
        # 'filter': {'status': 'active'},
        # 'fields': ['appCode', 'name']
    }

    try:
        # Make POST request to fetch the list of apps
        response = requests.post(apps_api_url, json=apps_payload, headers=headers)
        response.raise_for_status()
        response_json = response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error fetching apps list: {e}", file=sys.stderr)
        sys.exit(1)

    # Extract apps from the API response
    apps = []
    for item in response_json['source']:
        app_code = item.get('appCode')
        if app_code:
            apps.append(app_code)

    if not apps:
        print("No apps found in the API response.", file=sys.stderr)
        sys.exit(1)

    # API endpoint to get hosts for each app
    hosts_api_url = 'https://api.example.com/get_hosts'  # Replace with your actual API endpoint for hosts

    for app in apps:
        # Unique payload for the hosts API request
        hosts_payload = {
            # Replace with your actual payload for the hosts API
            # Example:
            'appCode': app,
            # 'environment': 'PROD',
            # 'includeDetails': True
        }

        try:
            # Make POST request to the API
            response = requests.post(hosts_api_url, json=hosts_payload, headers=headers)
            response.raise_for_status()
            response_json = response.json()
        except requests.exceptions.RequestException as e:
            print(f"Error fetching data for app {app}: {e}", file=sys.stderr)
            continue

        # Process each host in the response
        for host in response_json['source']:
            fqdn = host['fqdn']
            ownership_code = host['ownershipCode']
            environment = host['Environment']

            # Add host to ownershipCode group
            inventory.setdefault(ownership_code, {'hosts': []})
            if fqdn not in inventory[ownership_code]['hosts']:
                inventory[ownership_code]['hosts'].append(fqdn)

            # Add host to Environment group
            inventory.setdefault(environment, {'hosts': []})
            if fqdn not in inventory[environment]['hosts']:
                inventory[environment]['hosts'].append(fqdn)

            # Optional: Add host variables
            # inventory['_meta']['hostvars'][fqdn] = {
            #     'some_var': host.get('some_var')
            # }

    return inventory

def main():
    # Check command-line arguments
    if len(sys.argv) == 2 and sys.argv[1] == '--list':
        # Output the full inventory
        inventory = get_inventory()
        print(json.dumps(inventory, indent=2))
    elif len(sys.argv) == 3 and sys.argv[1] == '--host':
        # Output host-specific variables (if any)
        hostname = sys.argv[2]
        hostvars = {}  # Replace with actual host variables if needed
        print(json.dumps(hostvars, indent=2))
    else:
        print(f"Usage: {sys.argv[0]} --list or --host <hostname>", file=sys.stderr)
        sys.exit(1)

if __name__ == '__main__':
    main()
